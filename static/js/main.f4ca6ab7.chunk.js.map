{"version":3,"sources":["Navbar.js","JumboIntro.js","DataRenderer.js","Home.js","Pricing.js","index.js"],"names":["SundaraNavbar","Navbar","bg","variant","Brand","href","Nav","className","Link","Component","SundaraJumboIntro","Jumbotron","style","backgroundImage","height","backgroundSize","borderRadius","Container","color","DataRenderer","props","createFavoriteCities","a","cities","things","i","city","push","ToggleButton","key","value","onClick","setState","onFieldChange","length","state","favCities","createGroup","Times","DayRank","Header","CityString","NextGoodDay","group","header","API_HOST","todayDate","Date","toLocaleDateString","cityString","fetch","then","response1","json","resp","citycode","id","country","response","goodTimes","rank","dayRanking","role","aria-label","tempResp","tomorrow","tommdate","setDate","getDate","humanDate","toDateString","nextGoodDayElem","catch","doTheThing","d","loading","meme","clearTimeout","typingTimeout","setTimeout","bind","this","InputGroup","Prepend","Text","FormControl","onChange","event","console","log","target","aria-describedby","ToggleButtonGroup","type","name","Spinner","animation","Table","striped","bordered","hover","Home","Pricing","ReactDOM","render","StrictMode","path","exact","component","document","getElementById"],"mappings":"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","file":"static/js/main.f4ca6ab7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nexport default class SundaraNavbar extends Component {\n    render() {\n      return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"/\">\n          Sundara\n        </Navbar.Brand>\n        <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/\">Home</Nav.Link>\n        </Nav>\n      </Navbar>\n      );\n    }\n}","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Jumbotron, Container } from 'react-bootstrap';\n\nexport default class SundaraJumboIntro extends Component {\n    render() {\n      var styles ={\n        backgroundImage: \"url(https://images.unsplash.com/photo-1523308413200-8ab4ef0f1e0d)\",\n        height: \"40vh\",\n        backgroundSize: \"cover\",\n        borderRadius: 0\n      }\n      var whiteText = {\n        color: \"#ffffff\"\n      }\n      return (\n        <Jumbotron style={styles}>\n          <Container style={whiteText}>\n          <h1>Determine your future</h1>\n          <p>\n            Use the power of astrology and numerology to determine the best times to start a new task. <br />\n            Get started today for a brighter future!\n          </p>\n          </Container>\n        </Jumbotron>\n      );\n    }\n}","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Table, InputGroup, FormControl, Spinner, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\n\nexport class DataRenderer extends Component {\n  constructor(props) {\n    super(props)\n    this.state ={loading: false, city: \"\", favCities: []}\n    this.typingTimeout = null;\n    this.onFieldChange = this.onFieldChange.bind(this);\n  }\n  createFavoriteCities = async() => {\n    const cities = [\"New York City\", \"Chicago\", \"Houston\", \"Los Angeles\", \"San Diego\", \"City of London\", \"New Dehli\"]\n    let things = []\n    for (let i = 0; i < cities.length; i++) {\n      const city = cities[i]\n      things.push(<ToggleButton key={city} value={city} onClick={() => {this.setState({city: city}); this.onFieldChange(city);}}>{city}</ToggleButton>);\n    }\n    this.state.favCities = things;\n    return things\n  }\n  createGroup = async (city) => {\n    this.setState({Times: [], DayRank: [], Header: [], CityString: [], NextGoodDay: []})\n    let group = []\n    let header = []\n    const API_HOST= \"sundara-api.devksingh.com\"\n    const todayDate = new Date().toLocaleDateString('en-GB')\n    let cityString = ``\n    await fetch(`https://${API_HOST}/api/getCityCode?city=${city}`)\n      .then(async (response1) => {\n          response1 = response1.json();\n          return response1\n      }).then(async (resp) => {\n          const citycode = resp.id\n          cityString = `${resp.city}, ${resp.state} (${resp.country})`\n          await fetch(`https://${API_HOST}/api/getTimes?citycode=${citycode}&date=${todayDate}`)\n          .then(async (response) => {\n            response = await response.json();\n              header.push(<thead><tr><th>Good Time Start</th><th>Good Time End</th></tr></thead>)\n            for (let i = 0; i < response.goodTimes.length; i++) {\n              if (response.goodTimes[i][0] === response.goodTimes[i][1]){\n                continue\n              }\n              group.push(\n                <tr key={i}><td>{response.goodTimes[i][0]}</td><td>{response.goodTimes[i][1]}</td></tr>\n              )\n            }\n            let rank = \"\";\n            if (response.dayRanking === \"Good\") {\n              rank = <h2 style={{color: 'green'}}>Today is a Good day <span role=\"img\" aria-label=\"happy\">ðŸ˜Š</span></h2>\n            } else if (response.dayRanking === \"Bad\") {\n              rank = <h2 style={{color: 'red'}}>Today is a Bad day <span role=\"img\" aria-label=\"sad\">ðŸ˜ž</span></h2>\n            } else {\n              rank = <h2>Today is an OK day.</h2>\n            }\n            if (response.dayRanking !== \"Good\") {\n              let tempResp = response.dayRanking;\n              let tomorrow = new Date();\n              let tommdate = \"\";\n              let i = 0\n              do {\n                tomorrow.setDate(tomorrow.getDate() + i);\n                tommdate = tomorrow.toLocaleDateString('en-GB');\n                await fetch(`https://${API_HOST}/api/getTimes?citycode=${citycode}&date=${tommdate}`)\n                // eslint-disable-next-line\n                .then(async (response) => {\n                  response = await response.json();\n                  tempResp = response.dayRanking\n                })\n                i += 1\n              } while (tempResp !== \"Good\")\n              const humanDate = new Date(tommdate).toDateString();\n              const nextGoodDayElem = <h4><i>Next good day is: {humanDate}.</i></h4>\n              this.setState({NextGoodDay: nextGoodDayElem})\n            }\n            this.setState({Times: group, DayRank: rank, Header: header, CityString: <i>{cityString}</i>})\n        })\n      }).catch(() => {\n        if (this.state.city !== '') {\n          this.setState({Times: [], DayRank: <h2 style={{color: 'red'}}>City not found</h2>, Header: [], CityString: []})\n        } else {\n          this.setState({Times: [], DayRank: <h2>Please enter a city</h2>, Header: [], CityString: []})\n        }\n      })\n    }\n    doTheThing = async (d) => {\n      await this.createGroup(d); this.setState({loading: false});\n    }\n    onFieldChange = async (meme) => {\n      await this.setState({loading: true, city: meme});\n      await clearTimeout(this.typingTimeout);\n      this.typingTimeout = setTimeout(() => {this.doTheThing(meme)}, 550);\n    }\n    render() {\n      this.createFavoriteCities();\n      return (\n      <Container>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"basic-addon3\">\n                City\n              </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl onChange={(event) => {console.log(event.target.value); this.onFieldChange(event.target.value)}} id=\"geocoderid\" value={this.state.city} aria-describedby=\"basic-addon3\" />\n          </InputGroup>\n          <i>Or choose from some common cities</i>\n          <br />\n          <ToggleButtonGroup type=\"radio\" name=\"options\">\n            {this.state.favCities}\n          </ToggleButtonGroup>\n          <br />\n          <br />\n        <div aria-label=\"Times list\" key={'opts'}>\n          {this.state.loading ? <Spinner animation=\"border\" /> : \n          <div>\n              {this.state.DayRank} \n              {this.state.NextGoodDay} \n              {this.state.CityString}           \n              <br /><Table striped bordered hover>\n              {this.state.Header}\n              <tbody>\n                {this.state.Times}\n              </tbody>\n            </Table>\n          </div>\n          }\n          {this.state.loading ? <span></span> : <hr />}\n        </div>\n      </Container>\n      );\n    }\n}","import React from 'react';\nimport SundaraNavbar from './Navbar';\nimport SundaraJumboIntro from './JumboIntro';\nimport { DataRenderer } from './DataRenderer';\n\nfunction Home() {\n  return (\n    <div className=\"Home\">\n      <SundaraNavbar />\n      <SundaraJumboIntro />\n      <DataRenderer />\n    </div>\n  )\n}\n\nexport default Home;\n","import React from 'react';\nimport SundaraNavbar from './Navbar';\nimport SundaraJumboIntro from './JumboIntro';\n\nfunction Pricing() {\n  return (\n    <div className=\"Home\">\n      <SundaraNavbar />\n      <SundaraJumboIntro />\n    </div>\n  )\n}\n\nexport default Pricing;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Home from './Home';\r\nimport Pricing from './Pricing';\r\nimport {\r\n\tHashRouter,\r\n\tRoute\r\n} from \"react-router-dom\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n\t<HashRouter>\r\n\t\t<div>\r\n\t\t  <Route path=\"/\" exact component={ Home }/>\t\r\n\t\t  <Route path=\"/pricing\" exact component={ Pricing }/>\r\n\r\n    </div>\r\n  </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}